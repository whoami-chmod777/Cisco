
-- How ACLs Work --

· Configuring an ACL in **global config mode** will **not make** the ACL take **effect**
· The ACL must be applied to an **interface**
· ACLs are applied either **inbound** or **outbound**
· When the router checks a packet against the ACL, it processes the ACEs in order, from top to bottom    
· If the packet matches one of the ACEs in the ACL, the router takes the action and stops processing the ACL. All entries below the matching entry will be ignored


-- Implicit Deny --

· What will happen if a packet doesn’t match any of the entries in an ACL
· There is an 'implicit deny' at the end of all ACLs
· The implicit deny tells the router to deny all traffic that doesn’t match any of the configured entries in the ACL
    

-- ACL Types -- 

Standard ACLs: Match based on **Source IP address** only
→ Standard Numbered ACLs
→ Standard Named ACLs

Extended ACLs: Match based on **Source/Destination IP, Source/Destination port,** etc.
→ Extended Numbered ACLs
→ Extended Named ACLs


-- Standard Numbered ACLs --

· Standard ACLs match traffic based only on the source IP address of the packet
· Numbered ACLs are identified with a number (ACL 1, ACL 2, etc)
· Different types of ACLs have a different range of numbers that can be used.
  → Standard ACLs can use 1-99 and 1300-1999



-- Standard Numbered ACLs Configuration --

R1(config)# access-list 1 deny 1.1.1.1 0.0.0.0
R1(config)# access-list 1 deny 1.1.1.1
R1(config)# access-list 1 deny host 1.1.1.1

R1(config)# access-list 1 permit any
R1(config)# access-list 1 permit 0.0.0.0 255.255.255.255
R1(config)# access-list 1 remark ## BLOCK BOB FROM ACCOUNTING ##

R1(config-if)# ip access-group number {in | out}

R1# show access-lists
R1# show ip access-lists
R1# show running-config | include access-list


-- Standard Numbered ACLs Example Config --

R1(config)# access-list number {deny | permit} ip wildcard-mask

R1#
R1#conf t
R1(config)#access-list 1 deny 1.1.1.1 0.0.0.0
R1(config)#access-list 1 deny 1.1.1.1 
R1(config)#access-list 1 deny host 1.1.1.1

R1(config)#access-list 1 permit any 
R1(config)#access-list 1 permit 0.0.0.0 255.255.255.255

R1(config)#access-list 1 remark ## BLOCK MIRO FROM INTERNET ##
R1(config)# 

R1(config)#interface gigabitEthernet 0/2

R1(config-if)#ip access-group 1 out 
R1(config-if)#end
R1#


-- Standard Named ACLs Example Config --

R1(config)# ip access-list standard acl-name
R1(config-std-nacl)# [entry-number] {deny | permit} ip wildcard-mask

R1#conf t
R1(config)#ip access-list standard BLOCK_MIRO
R1(config-std-nacl)#5 deny 1.1.1.1
R1(config-std-nacl)#10 permit any
R1(config-std-nacl)#remark ## CONFIGURED APR 01 2024 ##
R1(config-std-nacl)#interface gigabitEthernet 0/1
R1(config-if)#ip access-group BLOCK_MIRO in
R1(config-if)#end
R1#

-- Configuration Check --

R1#show access-lists 
R1#show ip access-lists 
R1#sh running-config | include access-list



-- Another Configuration Example --

1. Configure OSPF on R1 and R2 to allow full connectivity between the PCs and servers.
2. Configure standard numbered ACLS on R1 and standard named ACLs on R2 to fulfill the following network policies:

- Only PC1 and PC3 can access 192.168.1.0/24
- Hosts in 172.16.2.0/24 can't access 192.168.2.0/24
- 172.16.1.0/24 can't access 172.16.2.0/24
- 172.16.2.0/24 can't access 172.16.1.0/24


-- Configure OSPF on R1 and R2 --

R1>en
R1#conf t
R1(config)#router ospf 1
R1(config-router)#network 172.16.0.0 0.0.255.255 area 0
R1(config-router)#network 203.0.113.0 0.0.0.3 area 0
R1(config-router)#end
R1# 

R1#sh ip ospf interface
R1#sh ip ospf neighbor
R1#sh ip route


R2>en
R2#conf t
R2(config)#router ospf 1
R2(config-router)#network 192.168.0.0 0.0.255.255 area 0
R2(config-router)#network 203.0.113.0 0.0.0.3 area 0
R2(config-router)#end
R2#

R2#sh ip ospf interface
R2#sh ip ospf neighbor
R2#sh ip route



-- Configure standard numbered ACLS on R1 and standard named ACLs on R2 --

- Standard Named ACLs -

R2#
R2#conf t
R2(config)#ip access-list standard TO_192.168.1.0_24
R2(config-std-nacl)#permit 172.16.1.1
R2(config-std-nacl)#permit 172.16.2.1
R2(config-std-nacl)#deny any 
R2(config-std-nacl)#interface g0/0
R2(config-if)#ip access-group TO_192.168.1.0_24 out
R2(config-if)#

ping -t 192.168.1.100


R2#
R2#conf t
R2(config)#ip access-list standard TO_192.168.2.0_24
R2(config-std-nacl)#deny 172.16.2.0 0.0.0.255
R2(config-std-nacl)#permit any 
R2(config-std-nacl)#interface g0/1
R2(config-if)#ip access-group TO_192.168.2.0_24 out 
R2(config-if)#

C:\>ping -t 192.168.2.100

R2#show access-lists 
Standard IP access list TO_192.168.1.0_24
    10 permit host 172.16.1.1 (6 match(es))
    20 permit host 172.16.2.1 (9 match(es))
    30 deny any (5 match(es))
Standard IP access list TO_192.168.2.0_24
    10 deny 172.16.2.0 0.0.0.255 (4 match(es))
    20 permit any (5 match(es))

R2#show access-lists 
R2#show ip access-lists 
R2#sh running-config | include access-list


- Standard Numbered ACLS -

R1#conf t
R1(config)#access-list 1 deny 172.16.1.0 0.0.0.255
R1(config)#access-list 1 permit any 
R1(config)#
R1(config)#access-list 2 deny 172.16.2.0 0.0.0.255
R1(config)#access-list 2 permit any 
R1(config)#end
R1#

R1(config)#do show access-lists
Standard IP access list 1
    10 deny 172.16.1.0 0.0.0.255
    20 permit any
Standard IP access list 2
    10 deny 172.16.2.0 0.0.0.255
    20 permit any

R1(config)#int g0/1
R1(config-if)#ip access-group 1 out
R1(config-if)#int g0/0
R1(config-if)#ip access-group 2 out
R1(config-if)#end
R1#
